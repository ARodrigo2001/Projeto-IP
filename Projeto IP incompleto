 
#Projeto IP
def menu_principal():
    return print('''
----- MENU PRINCIPAL -----

1 - Dados de Professores
2 - Dados de Alunos
3 - Dados de Disciplinas
4 - Dados de Turmas
0 - Sair
''')
#-------------------------------------------------------------
                                      #FUNÇÕES MENU

def menu_professor():           
    return print('''
----- MENU -----

* PROFESSORES *

1 - Adiciona
2 - Atualiza
3 - Consulta
4 - Deleta
0 - Menu Principal
''')
#------------------------
def menu_aluno():                           
    return print('''
----- MENU -----

* ALUNOS *

1 - Adiciona
2 - Atualiza
3 - Consulta
4 - Deleta
0 - Menu Principal
''')
#------------------------
def menu_disciplina():                           
    return print('''
----- MENU -----

* DISCIPLINAS *

1 - Adiciona
2 - Atualiza
3 - Consulta
4 - Deleta
0 - Menu Principal
''')
#-----------------------
def menu_turma():                           
    return print('''
----- MENU -----

* TURMAS *

1 - Adiciona
2 - Atualiza
3 - Consulta
4 - Deleta
0 - Menu Principal
''')
#--------------------------------------------------------------------------------------------
                                        #FUNÇÕES INPUT
def pedir_nome():                           
    return(input('Digite o nome(apenas letras):'))
    
def pedir_CPF():                            
    return(input('Digite o CPF(apenas dígitos):'))

def pedir_departamento():                   
    return(input('Digite o departamento:'))

def pedir_codigo():
    return(input('Digite o código da disciplina:'))

def pedir_codturma():
    return(input('Digite o código da turma:'))

def pedir_periodo():
    return(input('Digite o período(dígito):'))

def pedir_CPF_professor():
    return(input('Digite o CPF do Professor(apenas dígitos):'))

def pedir_CPF_aluno():
    return (input('Digite o CPF do Aluno(apenas dígitos):'))
#--------------------------------------------------------------------------------------------
                                #LISTAS E LEITURAS
professores = []
alunos = []
turmas = []
disciplina = []

#PROFESSOR:
arquivo_p = open('professores.txt','a')
arquivo_p = open('professores.txt','r')
for linha in arquivo_p.readlines():
    professores.append(linha.rstrip("\n").split('-'))    
arquivo_p.close()
#ALUNOS:
arquivo_a = open('alunos.txt','a')
arquivo_a = open('alunos.txt','r')
for linha in arquivo_a.readlines():
    alunos.append(linha.rstrip("\n").split('-'))
arquivo_a.close()
#DISCIPLINAS
arquivo_d = open('disciplinas.txt','a')
arquivo_d = open('disciplinas.txt','r')
for linha in arquivo_d.readlines():
    disciplina.append(linha.rstrip("\n").split('-'))
arquivo_d.close()
#TURMAS
arquivo_t = open('turmas.txt','a')
arquivo_t = open('turmas.txt','r')
for linha in arquivo_t.readlines():
    turmas.append(linha.rstrip("\n").split('-'))
arquivo_t.close()


#--------------------------------------------------------------------------------------------
                                #FUNÇÃO CRIAR CADASTRO PROFESSOR
while True:
    menu_principal()
    consulta =(input('Quais dados gostaria de alterar?'))
    if consulta == '0':
        break
    if consulta == '1':
        menu_professor()
        c = 0
        c_a = 0
                                  
        def create():
            global alunos
            global professores
            global c
            print('---- Insira os dados a serem cadastrados ----')
            nome_professor = pedir_nome()
            cpf_professor = pedir_CPF()
            while cpf_professor.isdigit() is False:
                print('---- CPF Inválido ----')
                cpf_professor = pedir_CPF()
            departamento_professor = pedir_departamento()
            if len(professores) and len(alunos) == 0:
                arquivo_p = open('professores.txt', 'a')
                arquivo_p.write('%s-%s-%s\n' %(nome_professor, cpf_professor, departamento_professor))
                arquivo_p.close()
                professores.append([nome_professor, cpf_professor, departamento_professor])
                print('---- Cadastro Realizado ----')
            else:
                for p, e in enumerate(alunos):
                    if e[1] == cpf_professor:
                        print('---- CPF já cadastrado ----')
                        c = 1
                if c != 1:
                    for p, e in enumerate(professores):
                        if e[1] == cpf_professor:
                            print('---- CPF já cadastrado ----')
                            c = 1
                if c != 1:
                    arquivo_p = open('professores.txt', 'a')
                    arquivo_p.write('%s-%s-%s\n' %(nome_professor, cpf_professor, departamento_professor))
                    arquivo_p.close()
                    professores.append([nome_professor, cpf_professor, departamento_professor])
                    print('---- Cadastro Realizado ----')
                
                c = 0
#--------------------------------------------------------------------------------------------
                                 #FUNÇÃO ATUALIZAR CADASTRO PROFESSOR
        def update():                                                                                                   
            global professores
            global alunos
            if len(professores) == 0:
                print('---- Não há nenhum professor cadastrado ----')
            else:
                print('---- Insira o CPF do cadastro a ser atualizado ----')
                cpf_professor = pedir_CPF()
                while cpf_professor.isdigit() is False:
                    print('---- CPF Inválido ----')
                    cpf_professor = pedir_CPF()
                c = False
                c2 = 0
                for p, e in enumerate(professores):
                    if e[1] == cpf_professor:
                        print('---- Professor encontrado ----')
                        novo_nome = input('Digite o novo nome:')
                        novo_cpf = input('Digite o novo CPF:')
                        while novo_cpf.isdigit() is False:
                            novo_cpf = pedir_CPF()
                        novo_departamento = input('Digite o novo departamento:')
                        for j, k in enumerate(alunos):
                            if k[1] == novo_cpf:
                                print('---- CPF já cadastrado ----')
                                c2 = 1
                                break
                        if c2 != 1:
                            for j, k in enumerate(professores):
                                if k[1] == novo_cpf:
                                    print('---- CPF já cadastrado ----')
                                    c2 = 1
                                    break
                        if c2 != 1:
                            professores[p][0] = novo_nome
                            professores[p][1] = novo_cpf
                            professores[p][2] = novo_departamento
                            print('---- Cadastro Atualizado ----')
                        c = True
                if c == False:
                    print('---- Professor não encontrado ----')
                
#-------------------------------------------------------------------------------------------
                                #FUNÇÃO DELETAR CADASTRO PROFESSOR
        def delete():                                                                                                   
            global professores
            if len(professores) == 0:
                print('---- Não há nenhum professor cadastrado ----')
            else:
                print('---- Insira o CPF do cadastro a ser atualizado ----')
                cpf_professor = pedir_CPF()
                while cpf_professor.isdigit() is False:
                    print('---- CPF Inválido ----')
                    cpf_professor = pedir_CPF()
                c = False
                for p, e in enumerate(professores):
                    if e[1] == cpf_professor:
                        del professores[p]
                        print('---- Professor Deletado ----')
                        c = True
                if c == False:
                    print('---- Professor não encontrado ----')
                                                                                                        
#--------------------------------------------------------------------------------------------
                                        #OPERADOR PROFESSORES    
        while True:
            v = input('Digite a operação para PROFESSORES:')
            if v == '0':
                break
            elif v == '1':
                create()
                continue
            elif v == '2':
                update()
                continue
            elif v == '3':
                if len(professores) == 0:
                    print('---- Não há nenhum professor cadastrado ----')
                else:
                    for p, e in enumerate(professores):
                        print('Professor(a): %s    CPF: %s     Departamento: %s' %(e[0], e[1], e[2]))
                    continue
            elif v == '4':
                delete()
            else:
                print('---- Operação Inválida ----')

#--------------------------------------------------------------------------------------------
                                #FUNÇÃO CRIAR CADASTRO ALUNO
    if consulta == '2':
        menu_aluno()
        c = 0
        
        def createA():
            global alunos
            global professores
            global c
            print('---- Insira os dados a serem cadastrados ----')
            nome_aluno = pedir_nome()
            cpf_aluno = pedir_CPF()
            while cpf_aluno.isdigit() is False:
                print('---- CPF Inválido ----')
                cpf_aluno = pedir_CPF()
            if len(alunos) and len(professores) == 0:
                arquivo_a = open('alunos.txt', 'a')
                arquivo_a.write('%s-%s\n' %(nome_aluno, cpf_aluno))
                arquivo_a.close()
                alunos.append([nome_aluno, cpf_aluno])
                print('---- Cadastro Realizado ----')
            else:
                for p, e in enumerate(professores):
                    if e[1] == cpf_aluno:
                        print('---- CPF já cadastrado ----')
                        c = 1
                if c != 1:
                    for p, e in enumerate(alunos):
                        if e[1] == cpf_aluno:
                            print('---- CPF já cadastrado ----')
                            c = 1
                if c != 1:
                    arquivo_a = open('alunos.txt', 'a')
                    arquivo_a.write('%s-%s\n' %(nome_aluno, cpf_aluno))
                    arquivo_a.close()
                    alunos.append([nome_aluno, cpf_aluno])
                    print('---- Cadastro Realizado ----')
                c = 0
#--------------------------------------------------------------------------------------------
                                        #FUNÇÃO ATUALIZAR CADASTRO ALUNO
        def updateA():
            global alunos
            global professores
            if len(alunos) == 0:
                print('---- Não há nenhum aluno cadastrado ----')
            else:
                print('---- Insira o CPF do cadastro a ser atualizado ----')
                cpf_aluno = pedir_CPF()
                while cpf_aluno.isdigit() is False:
                    print('---- CPF Inválido ----')
                    cpf_aluno = pedir_CPF()
                c = False
                c2 = 0
                for p, e in enumerate(alunos):
                    if e[1] == cpf_aluno:
                        print('---- Aluno encontrado ----')
                        novo_nome = input('Digite o novo nome:')
                        novo_cpf = input('Digite o novo CPF:')
                        while novo_cpf.isdigit() is False:
                            novo_cpf = pedir_CPF()
                        for j, k in enumerate(alunos):
                            if k[1] == novo_cpf:
                                print('---- CPF já cadastrado ----')
                                c2 = 1
                        for j, k in enumerate(professores):
                            if k[1] == novo_cpf:
                                print('---- CPF já cadastrado ----')
                                c2 = 1
                        if c2 != 1:
                            alunos[p][0] = novo_nome
                            alunos[p][1] = novo_cpf
                            print('---- Cadastro Atualizado ----')
                        c = True
                if c == False:
                    print('---- Aluno não encontrado ----')
#--------------------------------------------------------------------------------------------                    
                                #FUNÇÃO DELETAR CADASTRO ALUNO
        def deleteA():                                                                                                   
            global alunos
            if len(alunos) == 0:
                print('---- Não há nenhum aluno cadastrado ----')
            else:
                print('---- Insira o CPF do cadastro a ser atualizado ----')
                cpf_aluno = pedir_CPF()
                while cpf_aluno.isdigit() is False:
                    print('---- CPF Inválido ----')
                    cpf_aluno = pedir_CPF()
                c = False
                for p, e in enumerate(alunos):
                    if e[1] == cpf_aluno:
                        del alunos[p]
                        print('---- Aluno Deletado ----')
                        c = True
                if c == False:
                    print('---- Aluno não encontrado ----')
#--------------------------------------------------------------------------------------------
                                    #OPERADOR ALUNOS
    
        while True:
            v = input('Digite a operação para ALUNOS:')
            if v == '0':
                break
            elif v == '1':
                createA()
                continue
            elif v == '2':
                updateA()
                continue
            elif v == '3':
                if len(alunos) == 0:
                    print('---- Não há nenhum aluno cadastrado ----')
                else:
                    for p, e in enumerate(alunos):
                        print('Aluno(a): %s CPF: %s' %(e[0], e[1]))
                continue
            elif v == '4':
                deleteA()
            else:
                print('---- Operação Inválida ----')
#--------------------------------------------------------------------------------------------
                                #FUNÇÃO CRIAR CADASTRO DISCIPLINA
    if consulta == '3':
        menu_disciplina()
        c = 0

        def createD():
            global disciplina
            global c
            print('---- Insira os dados a serem cadastrados ----')
            nome = pedir_nome()
            codigo = pedir_codigo()
            if len(disciplina) == 0:
                arquivo_d = open('disciplinas.txt', 'a')
                arquivo_d.write('%s-%s\n' %(nome,codigo))
                arquivo_d.close()
                disciplina.append([nome, codigo])
                print('---- Cadastro Realizado ----')
            else:
                for p, e in enumerate(disciplina):
                    if e[1] == codigo:
                        print('---- Código de disciplina já cadastrado ----')
                        c = 1
                if c != 1:
                    arquivo_d = open('disciplinas.txt', 'a')
                    arquivo_d.write('%s-%s\n' %(nome,codigo))
                    arquivo_d.close()
                    disciplina.append([nome, codigo])
                    print('---- Cadastro Realizado ----')                
                c = 0
#--------------------------------------------------------------------------------------------
                                #FUNÇÃO ATUALIZAR CADASTRO DISCIPLINA
        def updateD():                                                                                                   
            global disciplina
            if len(disciplina) == 0:
                print('---- Não há nenhuma disciplina cadastrada ----')
            else:
                print('---- Insira os dados a serem atualizados ----')
                codigo = pedir_codigo()
                c = False
                c2 = 0
                for p, e in enumerate(disciplina):
                    if e[1] == codigo:
                        print('---- Disciplina encontrada ----')
                        novo_nome = input('Digite o novo nome:')
                        novo_codigo = input('Digite o novo código:')
                        for j, k in enumerate(disciplina):
                            if k[1] == novo_codigo:
                                print('---- Código de disciplina já cadastrado ----')
                                c2 = 1
                        if c2 != 1:
                            disciplina[p][0] = novo_nome
                            disciplina[p][1] = novo_codigo
                            print('---- Disciplina Atualizada ----')
                        c = True
                if c == False:
                    print('---- Disciplina não encontrada ----')                    
#--------------------------------------------------------------------------------------------
                                #FUNÇÃO DELETAR CADASTRO DISCIPLINA
        def deleteD():                                                                                                   
            global disciplina
            if len(disciplina) == 0:
                print('---- Não há nenhuma disciplina cadastrada ----')
            else:
                print('---- Insira o código da disciplina a ser atualizada ----')
                codigo = pedir_codigo()
                c = False
                for p, e in enumerate(disciplina):
            
                    if e[1] == codigo:
                        del disciplina[p]
                        print('---- Disciplina Deletada ----')
                        c = True            
                if c == False:
                    print('---- Disciplina não encontrada ----')
#--------------------------------------------------------------------------------------------
                                    #OPERADOR DISCIPLINA
        while True:
            v = input('Digite a operação para DISCIPLINA:')
            if v == '0':
                break
            elif v == '1':
                createD()
                continue
            elif v == '2':
                updateD()
                continue
            elif v == '3':
                if len(disciplina) == 0:
                    print('---- Não há nenhuma disciplina cadastrada ----')
                else:
                    for p, e in enumerate(disciplina):
                        print('Disciplina: %s    Código: %s' %(e[0], e[1]))
                continue
            elif v == '4':
                deleteD()
            else:
                print('---- Operação Inválida ----')
#--------------------------------------------------------------------------------------------
                                #FUNÇÃO CRIAR CADASTRO TURMA
    if consulta == '4':
        menu_turma()
        c = 0
        professor = []
        

        def createT():
            global professores
            global alunos
            global disciplina
            global turmas
            global c           
            print('---- Insira os dados a serem cadastrados ----')
            codigo_turma = pedir_codturma()
            periodo = pedir_periodo()
            while periodo.isdigit() is False:
                print('---- Período inválido(apenas números) ----')
                periodo = pedir_periodo()
            codigo_disciplina = pedir_codigo()
            valor = False
            while valor == False:
                for o, u in enumerate(disciplina):
                    if u[1] == codigo_disciplina:
                        valor = True
                if valor != True:
                    print('---- Disciplina não cadastrada ----')
                    codigo_disciplina = pedir_codigo()
            CPFs_P = (input('Digite o CPF do Professor da Turma:'))
            while CPFs_P.isdigit() is False:
                print('---- CPF Inválido  ----')
                CPFs_P = input('Digite o CPF do Professor da Turma:')
            z = False
            while z == False:
                for l, m in enumerate(professores):
                    if m[1] == CPFs_P:
                        professor = [m[0], m[1]]
                        print('---- Professor(a) Cadastrado(a) ----')
                        z = True
                if z != True:
                    print('---- CPF não encontrado ----')
                    CPFs_P = input('Digite o CPF do Professor da Turma:')
                
            cpfsa = []
            CPFs_A = int(input('Digite quantos CPFs de ALUNOS serão cadastrados na turma:'))
            while CPFs_A > len(alunos) or CPFs_A == 0:
                print('---- Valor inválido ou Não há alunos suficiente ----')
                CPFs_A = int(input('Digite quantos CPFs de ALUNOS serão cadastrados na turma:'))   
            for i in range(CPFs_A):
                x = False
                while x == False:
                    cpf_aluno = pedir_CPF_aluno()
                    while cpf_aluno.isdigit() is False:
                        print('---- CPF Inválido ----')
                        cpf_aluno = pedir_CPF_aluno()
                        
                    for b, a in enumerate(alunos):
                        if a[1] == cpf_aluno:
                            print('---- Aluno(s) cadastrado(s) ----')
                            cpfsa.append(cpf_aluno)                            
                            x = True
                        
                    if x != True:
                        print('---- CPF não cadastrado ----')
                        continue
                        
            if len(turmas) == 0:
                arquivo_t = open('turmas.txt', 'a')
                arquivo_t.write('%s-%s-%s-%s-%s\n' %(codigo_turma, periodo, codigo_disciplina, professor, cpfsa))
                arquivo_t.close()
                turmas.append([codigo_turma, periodo, codigo_disciplina, professor, cpfsa])
                print('---- Cadastro Realizado ----')
                cpfsa = []
            else:
                for j, r in enumerate(turmas):
                    if r[0] == codigo_turma:
                        print('---- Código de turma já cadastrado ----')
                        c = 1
                if c != 1:
                    arquivo_t = open('turmas.txt', 'a')
                    arquivo_t.write('%s-%s-%s-%s-%s\n' %(codigo_turma, periodo, codigo_disciplina, professor, cpfsa))
                    arquivo_t.close()
                    turmas.append([codigo_turma, periodo, codigo_disciplina, professor, cpfsa])
                    cpfsa = []
                    print('---- Turma Cadastrada ----')
                c = 0
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                            #FUNÇÃO ATUALIZAR CADASTRO TURMA
        def updateT():
            global turmas
            if len(turmas) == 0:
                print('---- Não há nenhuma turma cadastrada ----')
            else:
                print('---- Insira os dados a serem atualizados ----')
                c = False
                codigo_turma = pedir_codturma()
                for t, g in enumerate(turmas):
                    if g[0] == codigo_turma:
                        print('---- Turma Encontrada ----')
                        novo_codigo = input('Digite o novo código para a turma:')
                        novo_periodo = input('Digite o período:')
                        while novo_periodo.isdigit() is False:
                            print('---- Período inválido(apenas números) ----')
                            novo_periodo = pedir_periodo()
                        nova_disciplina = input('Digite o código da disciplina:')
                        valord = False
                        while valord == False:
                            for y, x in enumerate(disciplina):
                                if x[1] == nova_disciplina:
                                    valord = True
                            if valord != True:
                                print('---- Disciplina não cadastrada ----')
                                nova_disciplina = input('Digite o código da disciplina:')
                        CPFs_P = input('Digite o CPF do Professor da Turma:')
                        while CPFs_P.isdigit is False:
                            print('---- CPF Inválido ----')
                            CPFs_P = input('Digite o CPF do Professor da Turma:')
                        r = False        
                        for o, i in enumerate(professores):
                            if i[1] == CPFs_P:
                                print('---- Professor(es) cadastrado(s) ----')
                                r = True
                                professor = [i[0], i[1]]
                                
                        if r != True:
                            print('---- CPF não cadastrado ----')
                            continue
                        cpfsa = []           
                        CPFs_A = int(input('Digite quantos CPFs de Alunos serão cadastrados na turma:'))
                        while CPFs_A > len(alunos) or CPFs_A == 0:
                            print('---- Valor inválido ou Não há alunos suficientes ----')
                            CPFs_A = int(input('Digite quantos CPFs de ALUNOS serão cadastrados na turma:'))
                        for ç in range(CPFs_A):
                            w = False
                            while w == False:
                                novo_cpf_aluno = pedir_CPF_aluno()
                                while novo_cpf_aluno.isdigit() is False:
                                    print('---- CPF Inválido ----')
                                    novo_cpf_aluno = pedir_CPF_aluno()
                                    
                                for u, k in enumerate(alunos):
                                    if k[1] == novo_cpf_aluno:
                                        print('---- Aluno(s) cadastrado(s) ----')
                                        cpfsa.append(novo_cpf_aluno)
                                        w = True
                                if w != True:
                                    print('---- CPF não cadastrado ----')
                                    continue
                        if w == True:
                            turmas[t][0] = novo_codigo
                            turmas[t][1] = novo_periodo
                            turmas[t][2] = nova_disciplina
                            turmas[t][3] = professor
                            turmas[t][4] = cpfsa
                            print('---- Turma Atualizada ----')
                        c = True
            if c == False:
                print('---- Turma não encontrada ----')
        
                    
#------------------------------------------------------------------------------------------------------------------------
                                #FUNÇÃO DELETAR CADASTRO TURMA
        def deleteT():
            global turmas
            if len(turmas) == 0:
                print('---- Não há nenhuma turma cadastrada ----')
            else:
                print('---- Insira o código da turma a ser deletada ----')
                codigo_turma = pedir_codturma()
                c = False
                for p, e in enumerate(turmas):
                    if e[0] == codigo_turma:
                        del turmas[p]
                        print('---- Turma Deletada ----')
                        c = True
                if c == False:
                    print('---- Turma não encontrada ----')
#----------------------------------------------------------------------------------------------------------------------------------------------
                                #FUNÇÃO GERAR ATA DE EXERCÍDIO #INCOMPLETO
        def ata():
    
            global turmas
            global professores
            global alunos
            global disciplina
            global professor
            g = int(input('Digite o código da turma para gerar a ata de exercício:'))
            
            
            for y in turmas:
                if g in turmas == False:
                    print('---- Turma não encontrada ----')
                    break
                else:
                    for a, b in enumerate(turmas):
                        print('==== UNIVERSIDADE FEDERAL RURAL DE PERNAMBUCO - UFRPE ====')
                        print('==========================================================')
                        print('   ------ TURMA:%s PERÍODO:%s DISCIPLINA:%s -----' %(b[0], b[1], b[2]))
                        print('  PROFESSOR(A) :%s                         ALUNOS:' %(professor))
                        for u, i in enumerate(turmas):
                            print('                                       %s' %i[4])                                 
                
                
            
                
            
#----------------------------------------------------------------------------------------------------------------------------------------------
                              #OPERADOR TURMAS
        while True:
            v = input('Digite a operação para TURMAS:')
            if v == '0':
                break
            elif v == '1':
                createT()
                continue
            elif v == '2':
                updateT()
                continue
            elif v == '3':
                if len(turmas) == 0:
                    print('---- Não há nenhuma turma cadastrada ----')
                else:
                    for p, e in enumerate(turmas):   
                        print('===========================================================')
                        print(' Código da Turma: %s Período: %s Código da Disciplina: %s ' %(e[0], e[1], e[2]))
                        print('---- PROFESSOR(A) CPF ------  /  ----- ALUNOS ----- ')
                        print(' %s         CPFs:   %s             ' %(e[3] ,e[4]))
                        print('===========================================================')
                continue
            elif v == '4':
                deleteT()
            elif v == '5':
                ata()                        
            else:
                print('---- Operação Inválida ----')
                

#	Falta adicionar a função para deletar e atualizar em arquivo em todos
#	Falta a geração da ATA
#	Falta mostrar lista de turmas por professor
#	Falta mostrar lista de disciplinas por aluno


